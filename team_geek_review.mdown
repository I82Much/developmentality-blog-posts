Title: Team Geek - FIXME

subtitle: A Software Developer's Guide to Working Well with Others

Ben Collins-Sussman, Brian W. Fitzpatrick

Disclaimer: I work at Google, as do the authors, but this review reflects my views only and not necessarily those of Google.

Ben Collins-Sussman and Brian W. Fitzpatrick, two of the engineers behind the SVN version control system, and two Google engineers, have created a book about the softer side of software engineering - working with people.  


I found this book utterly engrossing; I read it from cover to cover during two legs of a long trans-continental flight. It is written in an informal style, with illustrations sprinkled throughout.

The authors lay out a compelling case for the importance of this book. Programmers tend to lionize the lone programmer, like Linus Torvalds of Linux fame or John Carmack of id. In some rare cases, geniuses do manage to accomplish incredible things on their own. But the majority of the time, great software is a collaborative effort performed by a team of people of varying skills, backgrounds, and communication styles. While there are many books which help improve your technical proficiency, this is one of the few I've encountered that aims to help you create better software through better people skills.

I won't reiterate all of the content of the book but there are a few themes that occur throughout that I'd like to touch on.

The first is that it is crucial to spread the knowledge throughout the team rather than keeping it siloed in the heads of a few people. They whimsically refer to this as the "bus factor" - essentially, how many people would it take to be hit by a bus (or otherwise incapacitated) before the project would fall apart?

There are multiple ways the authors discuss this spread of knowledge. One is through the use of communication channels that are easily archiveable and searchable rather than through point to point communication. For instance, it is better to ask questions of the team via an IRC channel or mailing list than to ask someone directly, because that exchange will be easily found in the future. It also gives other team members visibility into the decision making process.

Another reason to spread knowledge throughout the team is so that members do not rely on [cargo cult programming][]. When infrastructure or other pieces of code works smoothly, it's tempting to take it for granted and not think about the moving pieces underneath, or even care about understanding how it works - it works, in essence, magically. If instead the team members understand what actually goes on under the hood, they are in a much better position to 1) debug it if something goes wrong 2) ensure they don't cause bugs in the configuration in the first place and 3) can explain it to others as well.


[cargo cult programming]:http://en.wikipedia.org/wiki/Cargo_cult_programming

A second main emphasis of the book is focus. The first example of this is "saying no to all the distractions".  Part of an effective team, the authors say, is having a manager who can shield you from the chaos inherent in the organization, freeing the engineers to work on what's important.

Another way to engender focus at the team level is to decide on a mission statement. It might sound cheesy, but they offer a compelling argument as to its efficacy. They relate an example of how they used this technique on one of their projects and it became clear that many of the senior engineers had very different goals and ideas of what the product should do. Had they not forced the team to specify very clearly what they were trying to accomplish, and just as importantly, what the non-goals of the product were, there would have been significant wasted effort by people working at cross purposes. 
They use the analogy of a cart being pulled by different team members in different directions - by not working towards one goal, the cart will not move forward as quickly as it would if all were pulling together.

While much of the book is generalizable to any sort of team environment, the authors do give some coding specific advice. For instance, they talk about how it can be detrimental to the team to attach authors' names to files, as it quickly becomes stale information that doesn't reflect who actually has contributed to the file. I have read many times about how revision history does not belong in the source code, and that that information should be stored in the revision/version control system, but I have never heard an argument made that the author information should likewise reside solely in VCS.

Conclusion
While much of the advice in the book is common sense, there are also many specific, concrete ideas that I had never considered before. I would recommend this book without reservation to anyone working on a team that writes software.








foster team prideincrease "bus" factor
post mortems

engineers will want to have some say in the direction of the product

Talks a lot about meetings and how they can be a huge time suck - crucial to have agenda, and invite bare minimum of people.  Also try not to schedule meetings during 'make time' but instead towards end of day or near lunch, or other natural 'interrupt' time

importance of using bug tracker
should be updating bugs as progress is made

tech lead vs tech lead manager

"Say yes to things that can be undone"

sharpening the knife

# poisonous people
refuse to tolerate negative behaviors

"doument all history"
"overentitlement"

perfect is the enemy of good
"Never attribute to malice that which is aequately explained by stupidity

ch. 5
two levels - manager, engineers
"Pursue extra responsibility"
"Over deliver on what's expected of you"

rather than eliminate bad habits (extra meetings) ,replace w/ good one (replace bad meeting that's useless with a good one)

"try to avoid promising things that you can't deliver even if it means saying no more often than you'd like"

*** be careful of spending too much time cleaning code - shipping is more important

***offensive vs defensive work

never spend more than 1/3 to 1/2 time on defensive tasks - 

gray market exchange of favors
when emailing execc or someone higher up, keep it extremely short
"Three bullets and a call to action"

"software doesn't end w/ throwing product over a wall"

importance of first impressions
first minute is crucial

"speed is a feature"
Don't be all things
hide complexity