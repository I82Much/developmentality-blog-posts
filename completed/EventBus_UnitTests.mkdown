2011-02-07

I've written previously about [EventBus][1], a great open source Java library for [pub-sub (publish subscribe)][2].  It's a truly excellent way to write loosely coupled systems, and much preferable to having to make your domain models extends [Observable][3] and your listeners implement [Observer][4].  I'm writing today to describe some difficulties in incorporating EventBus into unit tests, and how to overcome that problem.

## Test setup
I was attempting to test that certain messages were being published by a domain model object when they were supposed to.  In order to test this, I wrote a simple class that did nothing more than listen to the topics I knew that my model object was supposed to publish to, and then increment a counter when these methods were called.  It looked something like this:

<div>
[sourcecode language="java"]
class EventBusListener {
	private int numTimesTopicOneCalled = 0;
	private int numTimesTopicTwoCalled = 0;
	
	public EventBusListener() {
		AnnotationProcessor.process(this);
	}
	
	@EventTopicSubscriber(topic="topic_one")
	public void topicOneCalled(String topic, Object arg) {
		this.numTimesTopicOneCalled++;
	}

	@EventTopicSubscriber(topic="topic_two")
	public void topicTwoCalled(String topic, Object arg) {
		this.numTimesTopicTwoCalled++;
	}
	
	public int getNumTimesTopicOneCalled() {
		return this.numTimesTopicOneCalled;
	}
	
	public int getNumTimesTopicOneCalled() {
		return this.numTimesTopicTwoCalled;
	}
}
[/sourcecode]
</div>

The basic test routine looked something like this:

<div>
[sourcecode language="java"]
@Test
public void testTopicsFired() {
	
	
	// Uses EventBus internally
	DomainObject obj = new DomainObject();
	
	int count = 10;
	EventBusListener listener = new EventBusListener();
	for (int i = 0; i < count; i++) {
		obj.doSomethingThatShouldFireEventBusPublishing();
	}
	
	assertEquals(count, listener.getNumTimesTopicOneCalled());
	assertEquals(count, listener.getNumTimesTopicTwoCalled());
}
[/sourcecode]
</div>

This code kept failing, but in nondeterministic ways - sometimes the listener would report having its topic one called 4 times instead of 10, sometimes 7, but never the same issue twice.  Stepping through the code in debug mode I saw that the calls to `EventBus.publish` were in place, and sometimes they worked. Nondeterminism like this made me think of a threading issue, so I began to investigate.

## Problem
After reading through the [EventBus javadoc][5], I came upon the root of the problem:

> The EventBus is really just a convenience class that provides a static wrapper around a global EventService instance. This class exists solely for simplicity. Calling EventBus.subscribeXXX/publishXXX is equivalent to EventServiceLocator.getEventBusService().subscribeXXX/publishXXX, it is just shorter to type. See EventServiceLocator for details on how to customize the global EventService in place of the default SwingEventService.

And from the [SwingEventService javadoc][6] (emphasis mine):

> This class is Swing thread-safe. **All publish() calls NOT on the Swing EventDispatchThread thread are queued onto the EDT**. If the calling thread is the EDT, then this is a simple pass-through (i.e the subscribers are notified on the same stack frame, just like they would be had they added themselves via Swing addXXListener methods).

Here's the crux of the issue: the EventBus.publish calls are *not* occurring on the EventDispatchThread, since the Unit testing environment is headless and this domain object is similarly not graphical.  Thus these calls are being queued up using `SwingUtilities.invokeLater`, and they have no executed by the time the unit test has completed.  This leads to the non-deterministic behavior, as a certain number of the queued up messages are able to be processed before the end of execution of the unit test, but not all of them.


## Solutions

### Sleep Hack
One solution, albeit a terrible one, would be to put a hack in:

<div>
[sourcecode language="java"]
@Test
public void testTopicsFired() {
	// same as before

	// Let the messages get dequeued
	try {
		Thread.sleep(3000);
	}
	catch (InterruptedException e) {}
	
	assertEquals(count, listener.getNumTimesTopicOneCalled());
	assertEquals(count, listener.getNumTimesTopicTwoCalled());
}
[/sourcecode]
</div>

This is an awful solution because it involves an absolute hack.  Furthermore, it makes that unit test always take at least 3 seconds, which is going to slow the whole test suite down.

### ThreadSafeEventService
The real key is to ensure that whatever we call for EventBus within our unit testing code is using a [ThreadSafeEventService][7].  This EventService implementation does not use the `invokeLater` method, so you can be assured that the messages will be delivered in a deterministic manner.  As I previously described, the EventBus static methods are convenience wrappers around a certain implementation of the EventService interface.  We are able to modify what the default implementations will be by the [EventServiceLocator][8] class.  From the docs:

>By default will lazily hold a SwingEventService, which is mapped to `SERVICE_NAME_SWING_EVENT_SERVICE` and returned by `getSwingEventService()`. Also by default this same instance is returned by `getEventBusService()`, is mapped to `SERVICE_NAME_EVENT_BUS` and wrapped by the EventBus.

> To change the default implementation class for the EventBus' EventService, use the API:

	EventServiceLocator.setEventService(EventServiceLocator.SERVICE_NAME_EVENT_BUS, new SomeEventServiceImpl());
 
> Or use system properties by:

 	System.setProperty(EventServiceLocator.SERVICE_NAME_EVENT_BUS, YourEventServiceImpl.class.getName());


In other words, you can replace the `SwingEventService` implementation with the `ThreadSafeEventService` by calling

	EventServiceLocator.setEventService(EventServiceLocator.SERVICE_NAME_EVENT_BUS, new ThreadSafeEventService());
	
An alternative solution is use an EventService instance to publish to rather than the EventBus singleton, and expose getters/setters to that EventService.  It can start initialized to the same value that the EventBus would be wrapping, and then the ThreadSafeEventService can be injected for testing.  For instance:

<div>
[sourcecode language="java"]

public class ClassToTest{
	// Use the default EventBus implementation
	private EventService eventService = EventServiceLocator.getEventBusService();
	
	public void setEventService(EventService service) {
		this.eventService = service;
	}
	public EventService getEventService() {
		return this.eventService;
	}
	
	public void doSomethingThatNotifiesOthers() {
		// as opposed to EventBus.publish
		eventService.publish(...);
	}
}

[/sourcecode]
</div>

## Conclusion
I have explained how EventBus static method calls map directly to a singleton implementation of the EventService interface.  The default interface works well for Swing applications, due to its queuing of messages via the `SwingUtilities.invokeLater` method.  Unfortunately, it does not work for unit tests that listen for these EventBus publish events, since the behavior is nondeterministic and the listener might not be notified by the end of the unit test.  I presented a solution for replacing the default SwingEventService implementation with a ThreadSafeEventService, which will work perfectly for unit tests.



[1]:http://developmentality.wordpress.com/2010/05/11/eventbus-introduction-and-troubleshooting-for-annotation-problems/
[2]:http://en.wikipedia.org/wiki/Publish/subscribe
[3]:http://download.oracle.com/javase/1.4.2/docs/api/java/util/Observable.html
[4]:http://download.oracle.com/javase/1.4.2/docs/api/java/util/Observer.html
[5]:http://www.jarvana.com/jarvana/view/org/bushe/eventbus/1.3/eventbus-1.3-javadoc.jar!/org/bushe/swing/event/EventBus.html
[6]:http://eventbus.org/api/org/bushe/swing/event/SwingEventService.html
[7]:http://www.eventbus.org/api/org/bushe/swing/event/ThreadSafeEventService.html
[8]:http://www.eventbus.org/api/org/bushe/swing/event/EventServiceLocator.html